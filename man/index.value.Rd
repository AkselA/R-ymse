% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/latin square.R
\name{index.value}
\alias{index.value}
\title{Index–value representation of arrays}
\usage{
\method{index}{value}(x, reverse = FALSE)
}
\arguments{
\item{x}{an array or something that can be coerced into an array}

\item{reverse}{logical; convert from Index–value representation to regular
array representation?}
}
\description{
Represent an array as columns of dimensional indices and value
}
\details{
An n-dimensional array will be unfolded to a n+1-column data.frame where
the first n columns represent the indices of the n dimensions, and the last 
column gives the value found at each index tuple. The reverse process can
also be performed.
}
\examples{
arr <- array(1:(2*3*4), dim=c(2, 3, 4))
arr.is <- index.value(arr)

# can be used to permutate an array
index.value(arr.is[,c(2, 1, 3, 4)], rev=TRUE)
aperm(arr, c(2, 1, 3))

# can interpret values (symbols) as dimensional indices and permute them as well
arr2 <- array(rep(1:6, 4), dim=c(2, 3, 4))
arr2.is <- index.value(arr2)
index.value(arr2.is[,c(1, 2, 4, 3)], rev=TRUE)

# a latin square will produce an "orthogonal array"
set.seed(1)
lsq <- latin.sq(5)
iv <- index.value(lsq)
iv

# any permutation of a latin square is also a latin square
index.symbol(iv[, c(1, 3, 2)], reverse=TRUE)
}
\seealso{
\code{\link{latin.sq}}
}
